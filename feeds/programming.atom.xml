<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Not always an expert - Programming</title><link href="https://fredrikw.github.io/" rel="alternate"></link><link href="https://fredrikw.github.io/feeds/programming.atom.xml" rel="self"></link><id>https://fredrikw.github.io/</id><updated>2019-10-04T00:00:00+02:00</updated><subtitle>Cheminformatics, python, data science...</subtitle><entry><title>Saving raw Numpy arrays in a database via SQLAlchemy</title><link href="https://fredrikw.github.io/numpy-sqlalchemy.html" rel="alternate"></link><published>2019-10-04T00:00:00+02:00</published><updated>2019-10-04T00:00:00+02:00</updated><author><name>Fredrik Wallner</name></author><id>tag:fredrikw.github.io,2019-10-04:/numpy-sqlalchemy.html</id><summary type="html">&lt;p&gt;Saving raw Numpy arrays to a database through the use of TypeDecorators&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am currently implementing a database where I need to store large chunks of raw data in spreadsheet format. After some initial - slow - attempts with Pandas' &lt;code&gt;to_sql&lt;/code&gt; method I looked around for a way to store the raw array in a Blob. I found out about the TypeDecorator class and inspired by the example at &lt;a href="https://docs.sqlalchemy.org/en/13/core/custom_types.html#marshal-json-strings"&gt;https://docs.sqlalchemy.org/en/13/core/custom_types.html#marshal-json-strings&lt;/a&gt; I created the following helper class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Binary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeDecorator&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DBNumpyArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TypeDecorator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Represents a numpy array as a db BLOB&lt;/span&gt;

&lt;span class="sd"&gt;    Usage::&lt;/span&gt;

&lt;span class="sd"&gt;        DBNumpyArray(arr)&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;impl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Binary&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_bind_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dialect&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_result_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dialect&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A simple snippet that made wonders to my application!&lt;/p&gt;
&lt;p&gt;To further improve on the applicability, portability and speed, one could imagine to use &lt;code&gt;BytesIO&lt;/code&gt; and &lt;a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.save.html"&gt;numpy.save&lt;/a&gt; instead of  &lt;code&gt;dumps&lt;/code&gt; and &lt;code&gt;loads&lt;/code&gt;, but for me this was good enough!&lt;/p&gt;</content><category term="Python"></category><category term="Numpy"></category><category term="SQLAlchemy"></category></entry><entry><title>Pandas profiling</title><link href="https://fredrikw.github.io/pandas-profiling.html" rel="alternate"></link><published>2019-10-04T00:00:00+02:00</published><updated>2019-10-04T00:00:00+02:00</updated><author><name>Fredrik Wallner</name></author><id>tag:fredrikw.github.io,2019-10-04:/pandas-profiling.html</id><summary type="html">&lt;p&gt;A tip on the very interesting package Pandas Profiling&lt;/p&gt;</summary><content type="html">&lt;p&gt;I found out about &lt;a href="https://github.com/pandas-profiling/pandas-profiling"&gt;Pandas Profiling&lt;/a&gt; from this week's PyCoder's Weekly and I must say that it looks very interesting.&lt;/p&gt;
&lt;p&gt;In short, it's pandas.dataframe.describe() on steroids and will give an interactive html page with plenty of descriptive statistics and plots on your data frame. Perfect for exploration! I haven't tried it yet, but I sure will and this post is mostly so that I won't forget this...&lt;/p&gt;
&lt;p&gt;Below is a screen shot showing profiling of the Titanic data.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pandas profiling screenshot" src="https://fredrikw.github.io/images/pandas_profiling.png" title="A screen shot showing profiling of the Titanic data"&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Pandas"></category><category term="Datascience"></category></entry></feed>